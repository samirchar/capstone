---
title: "R Notebook"
output: html_notebook
---

```{r}
library(tidyverse)
library(dplyr)
library(DataExplorer)

```

# Read data.
```{r}

df_2010 = read.csv('/Users/tomislav_galjanic/Documents/Tomislav/Columbia/Courses/Fall 2021/ENGI E4800/Tedesco/CDC/SVI/SVI2010_US.csv')
df_2000 = read.csv('/Users/tomislav_galjanic/Documents/Tomislav/Columbia/Courses/Fall 2021/ENGI E4800/Tedesco/CDC/SVI/SVI2000_US.csv')
df_2014 = read.csv('/Users/tomislav_galjanic/Documents/Tomislav/Columbia/Courses/Fall 2021/ENGI E4800/Tedesco/CDC/SVI/SVI2014_US.csv')
df_2016 = read.csv('/Users/tomislav_galjanic/Documents/Tomislav/Columbia/Courses/Fall 2021/ENGI E4800/Tedesco/CDC/SVI/SVI2016_US.csv')
df_2018 = read.csv('/Users/tomislav_galjanic/Documents/Tomislav/Columbia/Courses/Fall 2021/ENGI E4800/Tedesco/CDC/SVI/SVI2018_US.csv')

df_2010<-na_if(df_2010,-999)
df_2000<-na_if(df_2000,-999)
df_2014<-na_if(df_2014,-999)
df_2016<-na_if(df_2016,-999)
df_2018<-na_if(df_2018,-999)


df_2010_dict = read.csv('/Users/tomislav_galjanic/Documents/Tomislav/Columbia/Courses/Fall 2021/ENGI E4800/Tedesco/CDC/SVI/SVI2010_dictionary_augmented.csv')
df_2000_dict = read.csv('/Users/tomislav_galjanic/Documents/Tomislav/Columbia/Courses/Fall 2021/ENGI E4800/Tedesco/CDC/SVI/SVI2000_dictionary_augmented.csv')
df_2010_dict<-na_if(df_2010_dict,NA)
```


# 2010 dataset cleaning

Drop bad columns from dataset
```{r}
bad_cols <- c('E_P_PCI','M_P_PCI')
df_2010 = df_2010[,!(names(df_2010) %in% bad_cols)]
```

```{r}
df_2010$E_P_POV
```


Variable transformations
```{r}
df_2010$E_P_POV<-df_2010$E_P_POV*100
df_2010$M_P_POV<-df_2010$M_P_POV*100
df_2010$E_P_NOHSDIP<-df_2010$E_P_NOHSDIP*100
df_2010$M_P_NOHSDIP<-df_2010$M_P_NOHSDIP*100
df_2010$P_AGE65<-df_2010$P_AGE65*100
df_2010$P_AGE17<-df_2010$P_AGE17*100
df_2010$P_SNGPRNT<-df_2010$P_SNGPRNT*100
df_2010$P_MINORITY<-df_2010$P_MINORITY*100
df_2010$E_P_LIMENG<-df_2010$E_P_LIMENG*100
df_2010$M_P_LIMENG<-df_2010$M_P_LIMENG
df_2010$E_P_MUNIT<-df_2010$E_P_MUNIT*100
df_2010$M_P_MUNIT<-df_2010$M_P_MUNIT*100
df_2010$E_P_MOBILE<-df_2010$E_P_MOBILE*100
df_2010$M_P_MOBILE<-df_2010$M_P_MOBILE*100
df_2010$E_P_CROWD<-df_2010$E_P_CROWD*100
df_2010$M_P_CROWD<-df_2010$M_P_CROWD*100
df_2010$E_P_NOVEH<-df_2010$E_P_NOVEH*100
df_2010$M_P_NOVEH<-df_2010$M_P_NOVEH*100
```


Replace 2010 column names
```{r}
not_nans = !is.na(df_2010_dict$VARIABLE_NAME_2018)

mask = (!(df_2010_dict$VARIABLE_NAME %in% bad_cols))&(not_nans)

oldnames = c(df_2010_dict$VARIABLE_NAME[mask])
newnames = c(df_2010_dict$VARIABLE_NAME_2018[mask])

df_2010 <- df_2010 %>% rename_at(vars(oldnames), ~ newnames)
```

Create year column and assign year 2010
```{r}
df_2010$YEAR = 2010
```



# 2000 dataset cleaning


Variable transformations

```{r}
df_2000$G1V1R<-df_2000$G1V1R*100
df_2000$G1V2R<-df_2000$G1V2R*100
df_2000$G1V4R<-df_2000$G1V4R*100
df_2000$G2V1R<-df_2000$G2V1R*100
df_2000$G2V2R<-df_2000$G2V2R*100
df_2000$G2V3R<-df_2000$G2V3R*100
df_2000$G2V4R<-df_2000$G2V4R*100
df_2000$G3V1R<-df_2000$G3V1R*100
df_2000$G3V2R<-df_2000$G3V2R*100
df_2000$G4V1R<-df_2000$G4V1R*100
df_2000$G4V2R<-df_2000$G4V2R*100
df_2000$G4V3R<-df_2000$G4V3R*100
df_2000$G4V4R<-df_2000$G4V4R*100
df_2000$G4V5R<-df_2000$G4V5R*100
```

Replace 2000 column names
```{r}

oldnames = c(df_2000_dict$VARIABLE_NAME)
newnames = c(df_2000_dict$VARIABLE_NAME_2018)

df_2000 <- df_2000 %>% rename_at(vars(oldnames), ~ newnames)
```

Create year column and assign year 2000
```{r}
df_2000$YEAR = 2000
```


# 2016 and 2014 cleaning
```{r}
df_2014$YEAR = 2014
bad_cols <- c('FID','AFFGEOID','TRACTCE')
df_2014 = df_2014[,!(names(df_2014) %in% bad_cols)]


df_2016$YEAR = 2016
bad_cols <- c('FID')
df_2016 = df_2016[,!(names(df_2016) %in% bad_cols)]

```

# 2018 cleaning

```{r}
df_2018$YEAR = 2018
```


# Merge merge datarames of each year
```{r}
df <- bind_rows(df_2000,df_2010,df_2014,df_2016,df_2018)
```


Remove leading and trailing white spaces and upper case all categorical columns
```{r}
df <- df %>% mutate(across(where(is.character), toupper)) %>% mutate(across(where(is.character), str_trim))
```

Cast fips to character to avoid overflow
```{r}
df$FIPS <- as.character(df$FIPS)
```



```{r}
write.csv(df,file = '../data/processed/SVI_all_years.csv')
```


